** Qt Creator常用快捷键
原创 2013年09月12日 22:56:06
Ctrl+A  
Ctrl+i

【Ctrl + I】 选中的文字自动缩进
【Ctrl + /】 注释行和取消注释行
【Ctrl + D】 删除行,缺省，请自行设置
【Ctrl + [，Ctrl + ]】 移动到段落开始和移动到段落结尾

【Alt + /】 代码自动补齐功能,系统默认是【Ctrl + Space】,请自行更改
【F2】 声明和定义之间切换 
【F4】 头文件和源文件之间切换 
【Esc】 返回到代码编辑状态 
【Alt +left，Alt +right】页面之间切换 

【Ctrl + Shift + F】 弹出查找对话框
【Ctrl + F】 查找当前文档 
【F3】 查找下一个
【Shift + F3】 查找上一个

【Ctrl + 1】 激活欢迎模式 
【Ctrl + 2】 激活编辑模式 
【Ctrl + 3】 激活调试模式 
【Ctrl + 4】 激活项目模式 
【Ctrl + 5】 激活帮助模式 
【Ctrl + 6】 激活输出模式 

【Alt + 0】 隐藏或显示边栏 
【Alt + 1】 切换至生成窗口 
【Alt + 2】 切换至搜索结果窗口 
【Alt + 3】 切换至应用输出窗口 
【Alt + 4】 切换至编译输出窗口 

【Ctrl + M】 添加删除书签
【Alt + M】 激活书签窗口
【Ctrl + .】 下一个书签 
【Ctrl + ,】 上一个书签

【F5】 调试 
【Shift+F5】 停止调试 
【F10】 单步跳过 
【F11】 单步进入 
【Shift + F11】 单步跳出 
【Ctrl + Shift + F5】 重启调试 
【F9】 切换断点 


Q
** 安装目录/opt/Qt

编译Lambda QMAKE_CXXFLAGS += -std=c++0x

C++ RTTI
https://blog.csdn.net/three_bird/article/details/51479175

类型转换 http://www.cnblogs.com/tgycoder/p/5303701.html

资源文件国际化：document-open-fr.png:

第10章


Qt 提供了几种布局管理器供我们选择:
QHBoxLayout:按照水平方向从左到右布局;
QVBoxLayout:按照竖直方向从上到下布局;
QGridLayout:在一个网格中进行布局,类似于 HTML 的 table;
QFormLayout:按照表格布局,每一行前面是一段文本,文本后面跟随一个组件(通
常是输入框),类似 HTML 的 form;
QStackedLayout:层叠的布局,允许我们将几个组件按照 Z 轴方向堆叠,可以形
成向导那种一页一页的效果。


Qt 的事件对象有两个函数:accept() 和 ignore()。正如它们的名字一
样,前者用来告诉 Qt,这个类的事件处理函数想要这个事件;后者则告诉 Qt,这个类的事件
处理函数不想要这个事件。无论是 accept() 还是 ignore(),该类不想要的事件都会被继续发送
给其父组件。在事件处理函数中,可以使用 isAccepted() 来查询这个事件是不是已经被接收了。

不想让它继续转发,就返回 true,否则返回 false



** qt static compiler
https://blog.csdn.net/yuexiaxiaoxi27172319/article/details/51987004

** include path
*** path
INCLUDEPATH +=$$PWD/../../../public/common/three_lib/opencv/include \
              $$PWD/../../../public/common/inc
LIBS += -L$$PWD/../../../public/common/three_lib/opencv/lib \
 -lopencv_core -lopencv_imgproc -lopencv_imgcodecs -lopencv_highgui

#LIBS = -ldl
LIBS += $$PWD/../../../public/common/lib64/lib_sy_base.a
LIBS += $$PWD/../../../public/common/lib_boost/libboost_system.a \
        $$PWD/../../../public/common/lib_boost/libboost_filesystem.a \
        $$PWD/../../../public/common/lib_boost/libboost_thread.a

QMAKE_RPATHDIR+=  $$PWD/../../../public/common/lib_boost \
                  $$PWD/../../../public/common/three_lib/opencv/lib
                  $PWD/../../../public/common/dll*** TEMPLATE：定义项目的类型（应用程序app、库 等）

*** CONFIG: 指定编译器的不同选项。
*** HEADERS: 列出项目的头文件。
*** SOURCES: 列出项目的源文件(.cpp）
*** QT: 声明所需的Qt扩展模块及类，。默认包含核心模块及GUI模块。如果你希望移除他们其中之一，可以使用-=语句。
*** INCLUDEPATH: 指定用于搜索头文件的文件夹。
*** LIBS：包含链接时的库文件列表。使用-L指定文件夹路径，-l指定库的名称。
** ui
treewedgit
https://blog.csdn.net/czyt1988/article/details/1917172

QTableWidget行选中/删除/添加行
https://www.cnblogs.com/felix-wang/p/6210184.html


add delete modify
https://www.cnblogs.com/li-peng/p/3652287.html
*** 让QTreeWidget中的项目有复选框
QTreeWidget *legendView = new QTreeWidget(legend);　//创建一个QTreeWidget对象
    legend->setWidget(legendView);　//将该对象设为以前创建的停靠窗口legend的部件
    legendView->setSortingEnabled(false);　//不自动排序
    legendView->setDragEnabled(false);　//不可拖放
    legendView->setAutoScroll(true);  　//可以卷动
    legendView->setColumnCount(1);　//列数
    legendView->header()->setHidden(1);　//隐藏最顶上的表头
    legendView->setRootIsDecorated(true);　//让根项目前面也有树状虚线

    QTreeWidgetItem * item1 = new QTreeWidgetItem();
    item1->setText(0,"item1");
    item1->setFlags(Qt::ItemIsEditable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled | Qt::ItemIsSelectable);
    item1->setCheckState (0, Qt::Checked);   //复选框
    QIcon myIcon(QgsApplication::themePath()+"/mActionFolder.png");
    item1->setIcon(0, myIcon);　                       //还可以为item自定义图标

    legendView->addTopLevelItem(item1);　//把item添加到QTreeWidget中

    QTreeWidgetItem * item2 = new QTreeWidgetItem(item1);　
    item2->setText(0,"item2");

 

  方法2、给QTreeWidgetItem 加上checkBox

   QTreeWidgetItem *item=(this->treeWidget)->topLevelItem(0);

   item->setFlags(item->flags()|Qt::ItemIsUserCheckable);

   item->setCheckState(0, Qt::Checked);

1，调整列宽：
    header()->setResizeMode(QHeaderView::Interactive);
    setColumnWidth( 0 , 200 ); //第一列宽设为200
2，单击tree widget 的 header 自动重新排列各item，设置如下：
    setSortingEnabled(true);
3，拖曳：
    setDragEnabled(true);   //允许拖曳某item
    setAcceptDrops(true);   //允许item接受拖曳过来的item
    setDragDropMode(QAbstractItemView::InternalMove);   //移动模式，某item拖走后原来的位置不再保留该item
4，激活编辑状态的动作：
    setEditTriggers( QAbstractItemView::SelectedClicked ); // QAbstractItemView::SelectedClicked
     //表示当该item呈被选择状态时再被单击就可编辑该项，类似windows资源管理器中重命名文件

*** QTableWidget
https://blog.csdn.net/xcy2011sky/article/details/6991073



*** qdatetimeedit
QDateTimeEdit 用法总结
2017年07月30日 21:27:13
阅读数：1925

参考：Qt之QDateTimeEdit
一般用法
设置时间

QDateTimeEdit *dateTimeEdit = new QDateTimeEdit(this);
QDateTimeEdit *dateTimeEdit2 = new QDateTimeEdit(QDateTime::currentDateTime(), this);
QDateTimeEdit *dateEdit = new QDateTimeEdit(QDate::currentDate(), this);
QDateTimeEdit *timeEdit = new QDateTimeEdit(QTime::currentTime(), this);

// 设置日期时间格式
dateTimeEdit->setDisplayFormat("yyyy-MM-dd HH:mm:ss");
dateTimeEdit2->setDisplayFormat("yyyy/MM/dd HH-mm-ss");
dateEdit->setDisplayFormat("yyyy.M.d");
timeEdit->setDisplayFormat("H:mm");

设置范围

    dateEdit->setMinimumDate(QDate::currentDate().addDays(-365));  // -365天
    dateEdit->setMaximumDate(QDate::currentDate().addDays(365));  // +365天

    1
    2

获取时间

    QDate date = dateEdit->date();  // 日期
    QDateTime dateTime = dateEdit->dateTime();  // 日期时间
    QDate maxDate = dateEdit->maximumDate();  // 最大日期
    QDateTime maxDateTime = dateEdit->maximumDateTime();  // 最大日期时间
    QTime maxTime = dateEdit->maximumTime();  // 最大时间
    QDate minDate = dateEdit->minimumDate();  // 最小日期
    QDateTime minDateTime = dateEdit->minimumDateTime();  // 最小日期时间
    QTime minTime = dateEdit->minimumTime();  // 最小时间

// 用Section 获取各部分对应的值
QString strYear = dateEdit->sectionText(QDateTimeEdit::YearSection);
QString strMonth = dateEdit->sectionText(QDateTimeEdit::MonthSection);
QString strDay = dateEdit->sectionText(QDateTimeEdit::DaySection);
QString strHour = dateEdit->sectionText(QDateTimeEdit::HourSection);
QString strMinute = dateEdit->sectionText(QDateTimeEdit::MinuteSection);
QString strSecond = dateEdit->sectionText(QDateTimeEdit::SecondSection);

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17

弹出日历

// 注意：日历是对应的是QDate，而非QTime。所以QDateEdit、QDateTimeEdit可以使用，而QTimeEdit并不能使用。
dateEdit->setCalendarPopup(true);  // 日历弹出

    1
    2

信号

QDateTimeEdit *dateTimeEdit = new QDateTimeEdit(QDateTime::currentDateTime(), this);

// 连接信号槽
connect(dateTimeEdit, SIGNAL(dateChanged(QDate)), this, SLOT(onDateChanged(QDate)));
connect(dateTimeEdit, SIGNAL(dateTimeChanged(QDateTime)), this, SLOT(onDateTimeChanged(QDateTime)));
connect(dateTimeEdit, SIGNAL(timeChanged(QTime)), this, SLOT(onTimeChanged(QTime)));

    1
    2
    3
    4
    5
    6

槽函数

// 日期发生改变时执行
void onDateChanged(const QDate &date) {
    qDebug() << "QDate : " << date;
}

// 无论日期还是时间发生改变，都会执行
void onDateTimeChanged(const QDateTime &dateTime) {
    qDebug() << "QDateTime : " << dateTime;
}

// 时间发生改变时执行
void onTimeChanged(const QTime &time) {
    qDebug() << "QTime : " << time;
}

** 读写配置
二 Qt写ini文件
#include <QSettings>  
#include <QDebug>     
//QSettings构造函数的第一个参数是ini文件的路径,第二个参数表示针对ini文件,第三个参数可以缺省  
QSettings *configIniWrite = new QSettings("hahaya.ini", QSettings::IniFormat);  
configIniWrite->setValue("/ip/first", "192.168.0.1");  
configIniWrite->setValue("port/open", "2222");  
QSettings *configIniRead = new QSettings("hahaya.ini", QSettings::IniFormat);  
//将读取到的ini文件保存在QString中，先取值，然后通过toString()函数转换成QString类型  
QString ipResult = configIniRead->value("/ip/second").toString();  



