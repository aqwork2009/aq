
** 修复双系统引导o
1） /etc/grub.d/40_custom

2） menuentry 'Windows 10'{
set root=(hd0,1)
chainloader +1
}

3） grub2-mkconfig -o /boot/grub2/grub.cfg

** 常用命令
http://man.linuxde.net
tar -jcvf umt.tar.bz2 umt
上传文件 scp xxx.tar.bz2 root@47.106.xxx.xxx:/home/xhg_svc

打开当前文件夹 nautilus ./
source ~/.bashrc
/usr/bin/gnome-terminal
拷贝不提示：\cp -rf zongguofeng linuxzgf
linux to windows 共享文件：
mount -t cifs -o username="111"  //10.101.1.19/work_shared /home/mpan
mount -t cifs -o username="shared",password="shared",vers=2.0  //10.101.1.117/shared /home/win117
mount 

用命令:

文件和目录:
# cd -                                 返回上次所在目录
# cp -a dir1 dir2                 复制一个目录
# ls -a                                显示隐藏文件
# ls -l                                 显示详细信息
# ls -lrt                               按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）
# mkdir dir1 dir2                同时创建两个目录
# mkdir -p /tmp/dir1/dir2    创建一个目录树
# rm -rf dir1                       删除 'dir1' 目录及其子目录内容

查看文件内容:
# cat file1                          从第一个字节开始正向查看文件的内容
# head -2 file1                   查看一个文件的前两行
# more file1                       查看一个长文件的内容
# tac file1                          从最后一行开始反向查看一个文件的内容
# tail -3 file1                      查看一个文件的最后三行

文本处理:
# grep str /tmp/test            在文件 '/tmp/test' 中查找 "str"
# grep ^str /tmp/test           在文件 '/tmp/test' 中查找以 "str" 开始的行
# grep [0-9] /tmp/test         查找 '/tmp/test' 文件中所有包含数字的行
# grep str -r /tmp/*             在目录 '/tmp' 及其子目录中查找 "str"
# diff file1 file2                   找出两个文件的不同处
# sdiff file1 file2                 以对比的方式显示两个文件的不同

v查找:

# find / -name file1                                                 从 '/' 开始进入根文件系统查找文件和目录

# find / -user user1                                                查找属于用户 'user1' 的文件和目录

# find /home/user1 -name \*.bin                            在目录 '/ home/user1' 中查找以 '.bin' 结尾的文件

# find /usr/bin -type f -atime +100                         查找在过去100天内未被使用过的执行文件

# find /usr/bin -type f -mtime -10                           查找在10天内被创建或者修改过的文件

# locate \*.ps                                                         寻找以 '.ps' 结尾的文件，先运行 'updatedb' 命令

# find -name '*.[ch]' | xargs grep -E 'expr'              在当前目录及其子目录所有.c和.h文件中查找 'expr'

# find -type f -print0 | xargs -r0 grep -F 'expr'        在当前目录及其子目录的常规文件中查找 'expr'

# find -maxdepth 1 -type f | xargs grep -F 'expr'    在当前目录中查找 'expr'

压缩和解压:

# bzip2 file1                                   压缩 file1

# bunzip2 file1.bz2                        解压 file1.bz2

# gzip file1                                     压缩 file1

# gzip -9 file1                                最大程度压缩 file1

# gunzip file1.gz                            解压 file1.gz

# tar -cvf archive.tar file1               把file1打包成 archive.tar

（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）

# tar -cvf archive.tar file1 dir1        把 file1，dir1 打包成 archive.tar

# tar -tf archive.tar                         显示一个包中的内容

# tar -xvf archive.tar                      释放一个包

# tar -xvf archive.tar -C /tmp         把压缩包释放到 /tmp目录下

# zip file1.zip file1                          创建一个zip格式的压缩包

# zip -r file1.zip file1 dir1               把文件和目录压缩成一个zip格式的压缩包

# unzip file1.zip                             解压一个zip格式的压缩包到当前目录

# unzip test.zip -d /tmp/                 解压一个zip格式的压缩包到 /tmp 目录

yum工具:

# yum -y install [package]              下载并安装一个rpm包

# yum localinstall [package.rpm]    安装一个rpm包，使用你自己的软件仓库解决所有依赖关系

# yum -y update                              更新当前系统中安装的所有rpm包

# yum update [package]                 更新一个rpm包

# yum remove [package]                删除一个rpm包

# yum list                                        列出当前系统中安装的所有包

# yum search [package]                 在rpm仓库中搜寻软件包

# yum clean [package]                   清除缓存目录（/var/cache/yum）下的软件包

# yum clean headers                      删除所有头文件

# yum clean all                                删除所有缓存的包和头文件

网络:
# ifconfig eth0                                                                       显示一个以太网卡的配置
# ifconfig eth0 192.168.1.1 netmask 255.255.255.0            配置网卡的IP地址
# ifdown eth0                                                                        禁用 'eth0' 网络设备
# ifup eth0                                                                            启用 'eth0' 网络设备
# iwconfig eth1                                                                     显示一个无线网卡的配置
# iwlist scan                                                                         显示无线网络
# ip addr show                                                                     显示网卡的IP地址

其他:

# su -                                 切换到root权限（与su有区别）

# shutdown -h now           关机

# shutdown -r now            重启

# top                                  罗列使用CPU资源最多的linux任务 （输入q退出）

# pstree                             以树状图显示程序

# man ping                        查看参考手册（例如ping 命令）

# passwd                          修改密码

# df -h                               显示磁盘的使用情况

# cal -3                             显示前一个月，当前月以及下一个月的月历

# cal 10 1988                   显示指定月，年的月历

# date --date '1970-01-01 UTC 1427888888 seconds'   把一相对于1970-01-01 00:00的秒数转换成时间

常用快捷键:

       CentOS 6.4 中可以通过系统->首选项->键盘快捷键来设置快捷键，如图所示。例如可将运行终端的快捷键设为Ctrl+Alt+T。

**  mount linux windows
(1)源码（Stable Source Release 2015.3.14）下载：

wget https://tuxera.com/opensource/ntfs-3g_ntfsprogs-2015.3.14.tgz

(2)解压并编译安装：

tar -xzf ntfs-3g_ntfsprogs-2015.3.14.tgz

cd ntfs-3g_ntfsprogs-2015.3.14
./configure
make

make install   #非root 用户可使用 sudo make install 安装

(3)使用方法：

某一次的挂载：mount -t ntfs-3g /dev/DEVICE /mnt

（-t 指定挂载格式，DEVICE名称可以通过fdisk -l 去查找）

开机自动挂载：

 将 /dev/DEVICE /mnt ntfs-3g defaults 0 0 写入到 /etc/fstab 文件中

或者 echo "/dev/sda1 /mnt/windows ntfs-3g defaults 0 0 " >> /etc/fstab (注意使用 '>> ' 追加重定向，使用 '>' 会将/etc/fstab文件覆盖，当然，修改/etc/fstab 文件需要root 权限)

** 解压缩
tar zxvf ***..tar.gz


将/etc 目录压缩为etc.rar 命令为：
rar a etc.rar /etc
rar x etc.rar 
unrar -e etc.tar


*** 7z
2. 7z命令的使用
2.1 解压缩7z文件
7za x phpMyAdmin-3.3.8.1-all-languages.7z -r -o./

参数含义：

x  代表解压缩文件，并且是按原始目录树解压（还有个参数 e 也是解压缩文件，但其会将所有文件都解压到根下，而不是自己原有的文件夹下）

phpMyAdmin-3.3.8.1-all-languages.7z  是压缩文件，这里我用phpadmin做测试。这里默认使用当前目录下的phpMyAdmin-3.3.8.1-all-languages.7z

-r 表示递归解压缩所有的子文件夹

-o 是指定解压到的目录，-o后是没有空格的，直接接目录。这一点需要注意。
2.2 压缩文件／文件夹
7za a -t7z -r Mytest.7z /opt/phpMyAdmin-3.3.8.1-all-languages/*

参数含义：
a  代表添加文件／文件夹到压缩包

-t 是指定压缩类型，这里定为7z，可不指定，因为7za默认压缩类型就是7z。

-r 表示递归所有的子文件夹

Mytest.7z 是压缩好后的压缩包名

/opt/phpMyAdmin-3.3.8.1-all-languages/*：是压缩目标。

注意：7za不仅仅支持.7z压缩格式，还支持.tar.bz2等压缩类型的。如上所述，用-t指定即可。

** yum
https://blog.csdn.net/delphi1234/article/details/51546798

rpm -qa yum
yum-3.4.3-150.el7.centos.noarch
rpm -qa | grep yum | xargs rpm -e --nodeps  #这一步一定要执行，而且要将所有的组件卸载掉，如果卸载不干净，后面安装会有问题
rpm -qa yum


rpm -ivh

** rpm
rpm -qa|grep xx

查看SSH服务是否正在运行。
输入命令：/etc/init.d/sshd status
停止SSH服务命令（service sshd stop）；
重启SSH服务命令（service sshd restart）
netstat -antp | grep sshd 查看是否启动22端口]

检查SSHD是否在本运行级别下设置为开机启动
输入命令：chkconfig --list sshd

设置SSH服务为开机启动。输入命令：chkconfig sshd on 

** wine
Wine在CentOS 7-64位下安装全过程
原创 2014年12月23日 10:56:49

    标签：
    Wine CentOS 7 /
    64位 /
    安装 乱码

CentOS 7下安装最新的Wine（wine1.7.33）可谓一波三折，对于我这种菜鸟级别的人来说，真不好装！不过好在终于能够使用了。下面记录安装过程：以后有时间在详细叙说安装的各个步骤：

CentOS 7安装可以仿照：The right way to install Wine on CentOS 6 64bit 里面给出了详细步骤，下面就是仿照其安装的！

[johnnyhu@localhost 下载]$ su root
密码：
[root@localhost 下载]# wget http://citylan.dl.sourceforge.net/project/wine/Source/wine-1.7.33.tar.bz2
[root@localhost 下载]# tar -xf wine-1.7.33.tar.bz2
[root@localhost 下载]# yum -y groupinstall 'Development Tools'
[root@localhost 下载]# yum -y install libX11-devel freetype-devel
[root@localhost 下载]# yum install alsa-lib-devel.i686 libsndfile-devel.i686 readline-devel.i686 glib2.i686 glibc-devel.i686 libgcc.i686 libstdc++-devel.i686 pulseaudio-libs-devel.i686 cmake portaudio-devel.i686 openal-soft-devel.i686 audiofile-devel.i686 freeglut-devel.i686 lcms-devel.i686 libieee1284-devel.i686 openldap-devel.i686 unixODBC-devel.i686 sane-backends-devel.i686 fontforge libgphoto2-devel.i686 isdn4k-utils-devel.i686 mesa-libGL-devel.i686 mesa-libGLU-devel.i686 libXxf86dga-devel.i686 libXxf86vm-devel.i686 giflib-devel.i686 cups-devel.i686 gsm-devel.i686 libv4l-devel.i686 fontpackages-devel ImageMagick-devel.i686 openal-soft-devel.i686 libX11-devel.i686 docbook-utils-pdf libtextcat tex-cm-lgc

[root@localhost 下载]# yum install alsa-lib-devel audiofile-devel.i686 audiofile-devel cups-devel.i686 cups-devel dbus-devel.i686 dbus-devel fontconfig-devel.i686 fontconfig-devel freetype.i686 freetype-devel.i686 freetype-devel giflib-devel.i686 giflib-devel lcms-devel.i686 lcms-devel libICE-devel.i686 libICE-devel libjpeg-turbo-devel.i686 libjpeg-turbo-devel libpng-devel.i686 libpng-devel libSM-devel.i686 libSM-devel libusb-devel.i686 libusb-devel libX11-devel.i686 libX11-devel libXau-devel.i686 libXau-devel libXcomposite-devel.i686 libXcomposite-devel libXcursor-devel.i686 libXcursor-devel libXext-devel.i686 libXext-devel libXi-devel.i686 libXi-devel libXinerama-devel.i686 libXinerama-devel libxml2-devel.i686 libxml2-devel libXrandr-devel.i686 libXrandr-devel libXrender-devel.i686 libXrender-devel libxslt-devel.i686 libxslt-devel libXt-devel.i686 libXt-devel libXv-devel.i686 libXv-devel libXxf86vm-devel.i686 libXxf86vm-devel mesa-libGL-devel.i686 mesa-libGL-devel mesa-libGLU-devel.i686 mesa-libGLU-devel ncurses-devel.i686 ncurses-devel openldap-devel.i686 openldap-devel openssl-devel.i686 openssl-devel zlib-devel.i686 pkgconfig sane-backends-devel.i686 sane-backends-devel xorg-x11-proto-devel glibc-devel.i686 prelink fontforge flex bison libstdc++-devel.i686 pulseaudio-libs-devel.i686 gnutls-devel.i686 libgphoto2-devel.i686 openal-soft-devel openal-soft-devel.i686 isdn4k-utils-devel.i686 gsm-devel.i686 samba-winbind libv4l-devel.i686 cups-devel.i686 libtiff-devel.i686 gstreamer-devel.i686 gstreamer-plugins-base-devel.i686 gettext-devel.i686 libmpg123-devel.i686


[root@localhost 下载]# ls
FoxitReader-v1.1.zip  PDFStudio_v9_2_1_linux64.sh  wine-1.7.15  wine-1.7.15.tar.bz2  wine-1.7.33  wine-1.7.33.tar.bz2
[root@localhost 下载]# cd
[root@localhost ~]# mkdir wine64
[root@localhost ~]# ls
anaconda-ks.cfg  initial-setup-ks.cfg  perl5  wine64
[root@localhost ~]# cd wine64
[root@localhost wine64]# /home/johnnyhu/下载/wine-1.7.33/configure --enable-win64
[root@localhost wine64]# make > make.log 2>&1

[root@localhost wine64]# cd
[root@localhost ~]# mkdir wine32
[root@localhost ~]# ls
anaconda-ks.cfg  initial-setup-ks.cfg  perl5  wine32  wine64
[root@localhost ~]# cd wine32
[root@localhost wine32]# /home/johnnyhu/下载/wine-1.7.33/configure --enable-win32
[root@localhost wine32]# make > make.log 2>&1
[root@localhost wine32]# make install
[root@localhost wine32]# cd
[root@localhost ~]# cd wine64
[root@localhost wine64]# make install
[root@localhost wine64]# cd /home/johnnyhu/下载
[root@localhost 下载]# ls
FoxitReader-v1.1.zip  PDFStudio_v9_2_1_linux64.sh  wine-1.7.33
FoxitReader-Win.exe   wine-1.7.15                  wine-1.7.33.tar.bz2
[root@localhost 下载]# wine FoxitReader-Win.exe

注：这里我创建目录win32和win64时一时疏忽建在了root下，其实没必要，建在home下就可以了，好在不影响使用！


2. 以下是中文乱码时各种配置：


//  将simsun.ttc移动到/usr/share/wine/windows/中
[johnnyhu@localhost 下载]$ su root
密码：
[root@localhost 下载]# sudo mkdir -p /usr/share/wine/windows
[root@localhost 下载]# sudo mv simsun.ttc /usr/share/wine/windows/


//  配置Wine中文字体目录
[johnnyhu@localhost ~]$ cd ~/.wine
[johnnyhu@localhost ~]$ cd ~/.wine/drive_c
[johnnyhu@localhost drive_c]$ cd windows
[johnnyhu@localhost windows]$ cd fonts
bash: cd: fonts: 没有那个文件或目录
[johnnyhu@localhost windows]$ mkdir fonts
[johnnyhu@localhost windows]$ ls
command       help    notepad.exe  system32    twain_32.dll  win.ini
explorer.exe  hh.exe  regedit.exe  system.ini  twain.dll     winsxs
fonts         inf     rundll.exe   syswow64    winhelp.exe
Fonts         logs    system       temp        winhlp32.exe
[johnnyhu@localhost windows]$ cd fonts
[johnnyhu@localhost fonts]$ ln -s /usr/share/fonts/windows/simsun.ttc simsun.ttc
[johnnyhu@localhost fonts]$ ln -s /usr/share/fonts/windows/simsun.ttc simfang.ttc
[johnnyhu@localhost fonts]$ su root
密码：
[root@localhost fonts]# gedit ~/.wine/system.reg
[root@localhost fonts]# gedit ~/.wine/drive_c/windows/win.ini

[root@localhost ~]# cp -f /home/johnnyhu/zh.reg  ~/.wine/
[root@localhost ~]# ls ~/.wine
dosdevices  drive_c  system.reg  system.reg~  userdef.reg  user.reg  zh.reg

[root@localhost ~]# cd ~/.wine
[root@localhost .wine]# regedit zh.reg

[root@localhost drive_c]# cp -f /home/johnnyhu/下载/simsun.ttc windows/fonts
[root@localhost drive_c]# cd windows
[root@localhost windows]# ls
command       hh.exe         mono         system32      twain.dll     winsxs
explorer.exe  inf            notepad.exe  system.ini    winhelp.exe
fonts         Installer      regedit.exe  syswow64      winhlp32.exe
Fonts         logs           rundll.exe   temp          win.ini
help          Microsoft.NET  system       twain_32.dll  win.ini~
[root@localhost windows]# cd fonts
bash: cd: fonts: 不是目录

注：wine中文程序安装乱码的问题网上有很多教程，大体类似如：CentOS下Wine乱码解决办法  ，按照上面的，如果不出错的话，大体上就可以了！


3. 下面安装附件：

wine mono的安装 系统弹框之后自动安装完成，gecko 则自动安装失败，改手动安装。
//  安装win_gecko
[johnnyhu@localhost 下载]$  wget http://downloads.sourceforge.net/project/wine/Wine%20Gecko/2.34/wine_gecko-2.34-x86.msi
[johnnyhu@localhost 下载]$ su root
密码：
[root@localhost 下载]# sudo mkdir -p /usr/share/wine/gecko
[root@localhost 下载]#  sudo mv wine_gecko-2.34-x86.msi /usr/share/wine/gecko/
[root@localhost 下载]# ls /usr/share/wine/gecko/
wine_gecko-2.34-x86.msi
[root@localhost 下载]#

注：等所有的这些都完成之后，理论上点击右上脚的“应用程序” 里面会有wine 出现，这时就可以正常使用Wine了！

GOOD LUCK TO YOU！微笑
** vmware 
https://www.jianshu.com/p/520a09c3d808
地址：http://www.vmware.com/cn/products/workstation/workstation-evaluation.html 
yum -y install perl gcc kernel-devel libX11 libXinerama libXcursor libXtst
sh VMware-Workstation-xxxx-xxxx.bundle  
vmware-installer -u vmware-workstation
CG54H-D8D0H-H8DHY-C6X7X-N2KG6

ZC3WK-AFXEK-488JP-A7MQX-XL8YF

AC5XK-0ZD4H-088HP-9NQZV-ZG2R4

ZC5XK-A6E0M-080XQ-04ZZG-YF08D

ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8
** screenshot
捕获自定义区域 ：$ gnome-screenshot -a
捕获当前终端Terminal ： $ gnome-screenshot -w
捕获整个屏幕 ： $ gnome-screenshot

** g++ update
 CentOS 6.6 升级GCC G++ (当前最新版本为v6.1.0) (完整)

---恢复内容开始---

CentOS 6.6 升级GCC G++ (当前最新GCC/G++版本为v6.1.0)

没有便捷方式,

yum update....   yum install 

或者 添加yum 的 repo 文件 也不行, 只能更新到 4.4.7!

then,  只能手动编译安装了,那么开始第一步下载源代码吧,GO!

1、 获取安装包并解压

wget http://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.bz2

tar -jxvf gcc-6.1.0.tar.bz2

当然，http://ftp.gnu.org/gnu/gcc  里面有所有的gcc版本供下载，最新版本已经有6.1.0啦.

建议下载.bz2的压缩包,文件更小,下载时间更少.

2、 下载供编译需求的依赖项

参考文献[1]中说：这个神奇的脚本文件会帮我们下载、配置、安装依赖库，可以节约我们大量的时间和精力。

cd gcc-6.1.0

./contrib/download_prerequisites　

3、 建立一个目录供编译出的文件存放

mkdir gcc-build-6.1.0

cd gcc-build-6.1.0

4、 生成Makefile文件

../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib

5、 编译

make -j4

-j4选项是make对多核处理器的优化，如果不成功请使用 make，相关优化选项可以移步至参考文献[2]。

（注意：此步骤非常耗时,我虚拟机耗时近3小时; 实体机近80分钟,CPU基本是满的,内存也使用不少）
6、 安装

make install

(安装需要root权限!)

查看安装

ls /usr/local/bin | grep gcc
7、 重启，然后查看gcc版本

gcc -v
8、 写个C++11 特性的程序段 测试

tryCpp11.cc 代码省略....

g++ -std=c++11 -o tryCpp11 tryCpp11.cc

 

9、升级gcc，生成的动态库没有替换老版本gcc的动态库

源码编译升级安装了gcc后，编译程序或运行其它程序时，有时会出现类似/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found的问题。这是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库导致的，将gcc最新版本的动态库替换系统中老版本的动态库即可解决。

9.1 运行以下命令检查动态库：

strings /usr/lib64/libstdc++.so.6 | grep GLIBC

从输出可以看出，gcc的动态库还是旧版本的。说明出现这些问题，是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库。

9.2 执行以下命令，查找编译gcc时生成的最新动态库：

find / -name "libstdc++.so*"

将上面的最新动态库libstdc++.so.6.0.22复制到/usr/lib64目录下

cd /usr/lib64

cp /root/Downloads/gcc-6.1.0/gcc-build-6.1.0/stage1-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.22 ./

9.3 删除原来软连接：

rm -rf libstdc++.so.6

9.4 将默认库的软连接指向最新动态库：

ln -s libstdc++.so.6.0.22 libstdc++.so.6

9.5 默认动态库升级完成。重新运行以下命令检查动态库：

strings /usr/lib64/libstdc++.so.6 | grep GLIBC

可以看到 输出有"GLIBCXX_3.4.21" 了

** view process state
ps -aux | grep process_name
top -p 15699
** umbrello
但一般yum仓库配置正确后，可以直接使用#yum install umbrello -y 

https://umbrello.kde.org/installation.php#install-source-code-linux

To install from source out of git, enter the following commands in a shell:

mkdir -p $HOME/src
cd $HOME/src
git clone git://anongit.kde.org/umbrello  
cd umbrello
mkdir build
cd build

for building with Qt5/KF5 run:

cmake -DCMAKE_INSTALL_PREFIX=$HOME/umbrello -DBUILD_KF5=1 -DCMAKE_BUILD_TYPE=Debug ../

and on building for KDE4

cmake -DCMAKE_INSTALL_PREFIX=$HOME/umbrello -DBUILD_KF5=0 -DCMAKE_BUILD_TYPE=Debug ../

Check the cmake output for missing build requirements and install them

make
make install




under a KDE4 environment

Before running umbrello, you need set the KDEDIRS environment variable with:

export KDEDIRS=$HOME/umbrello:$KDEDIRS
kbuildsycoca4

Run the following command from a shell:

$HOME/umbrello/bin/umbrello &

You may add the following commands to your .bashrc or similar login shell config file to have umbrello in the users system path:

export KDEDIRS=$HOME/umbrello:$KDEDIRS
export PATH=$HOME/umbrello/bin:$PATH

With that you can run umbrello simply by typing:

umbrello

** 系统快键
lock screen: super + L
echo $DESKTOP_SESSION

** firefox
Firefox 键盘快捷键
导航类
后退： Alt+左方向键 或 Backspace
前进： Shift+Backspace 或 Alt+右方向键
首页： Alt+Home
打开文件： Ctrl+O
重新载入： F5 或 Ctrl+R
重新载入 (忽略缓存)： Ctrl+F5 或 Ctrl+Shift+R
停止： Esc

当前页
到页面底部： End
到页面顶部： Home
移到下一帧： F6
移到上一帧： Shift+F6
页面源代码： Ctrl+U
打印： Ctrl+P
页面另存为： Ctrl+S
放大文字： Ctrl++
缩小文字： Ctrl+-
恢复文本大小： Ctrl+0

编辑
复制： Ctrl+C
剪切： Ctrl+X
删除： Del
粘贴： Ctrl+V
重做： Ctrl+Y
全选： Ctrl+A
撤消： Ctrl+Z

搜索
本页查找： Ctrl+F
再次查找： F3
输入查找链接： '
输入查找文本： /
查找： Shift+F3
网页搜索： Ctrl+K 或 Ctrl+E

窗口和标签
关闭标签： Ctrl+W 或 Ctrl+F4
关闭窗口： Ctrl+Shift+W 或 Alt+F4
向左移动标签： Ctrl+左方向键 或 Ctrl+上方向键
向右移动标签： Ctrl+右方向键 或 Ctrl+下方向键
移动标签到开头： Ctrl+Home
移动标签到结尾： Ctrl+End
新建标签页： Ctrl+T
新建窗口： Ctrl+N
下一个标签页： Ctrl+Tab 或 Ctrl+PageDown
在新标签页打开网址： Alt+Enter
前一个标签页： Ctrl+Shift+Tab 或 Ctrl+PageUp
撤销关闭标签页： Ctrl+Shift+T
选择标签页 [1 to 8]： alt+[1 到 8]
选择最后标签页： alt+9

工具
添加所有为书签： Ctrl+Shift+D
添加当前为书签： Ctrl+D
打开书签： Ctrl+B 或 Ctrl+I
插入浏览： F7
下载： Ctrl+J
历史： Ctrl+H
清除私有数据： Ctrl+Shift+Del

其他
补全 .com 地址： Ctrl+Enter
补全 .net 地址： Shift+Enter
补全 .org 地址： Ctrl+Shift+Enter
删除选定的自匹配输入： Del
全屏： F11
选择地址条： Alt+D 或 F6 或 Ctrl+L
选择或管理搜索引擎： Alt+上方向键 或 Alt+下方向键 或 F4

Firefox 鼠标快捷键
后退： Shift+Scroll down
关闭标签页： 在标签上按鼠标中键
减小文字大小： Ctrl+Scroll up
前进： Shift+Scroll up
增大文字大小： Ctrl+Scroll down
新建标签页： 在标签页栏双击鼠标   
在后台打开标签页： Ctrl+Left-click 或 点击鼠标中键   
在前台打开标签页： Shift+Ctrl+Left-click 或 Shift+点击鼠标中键   
在新窗口打开： Shift+Left-click
刷新 (覆盖缓存)： Shift+Reload button   
保存页面为： Alt+Left-click   
逐行滚动： Alt+Scroll

** 防火墙
防火墙（firewalld）

    临时关闭防火墙
    systemctl stop firewalld
    永久防火墙开机自关闭
    systemctl disable firewalld
    临时打开防火墙
    systemctl start firewalld
    防火墙开机启动
    systemctl enable firewalld
    查看防火墙状态
    systemctl status firewalld


https://blog.csdn.net/u011846257/article/details/54707864
解决办法：

不管防火墙关没关，都是用systemctl stop firewalld 关闭防火墙。

然后使用yum install iptables-services 安装或者更新服务



这个时候是这样的：

然后使用systemctl enable iptables 启动iptables

最后使用systemctl start iptables 打开iptables


大功告成。  试试service iptables restart、stop

在新买的centos7服务器中想打开防火墙，采用传统centos6的方式用service iptables restart/stop/status 之后报错：


而在/etc/sysconfig/目录下也没有iptables文件。

这是因为centos7与centos6的区别。


解决办法：

不管防火墙关没关，都是用systemctl stop firewalld 关闭防火墙。

然后使用yum install iptables-service 安装或者更新服务



这个时候是这样的：

然后使用systemctl enable iptables 启动iptables

最后使用systemctl start iptables 打开iptables


大功告成。  试试service iptables restart、stop

** share网络共享
./smbpasswd -a aq
system目录配置
systemctl restart smb
https://www.cnblogs.com/dezai1223/p/5206858.html
https://blog.csdn.net/liuaigui/article/details/5077935

** ssh
** 远程桌面

xrdp
https://www.cnblogs.com/BinBinStory/p/7253325.html

https://blog.csdn.net/heirenheiren/article/details/7996603
https://github.com/neutrinolabs/xrdp/releases/download/v0.9.6/xrdp-0.9.6.tar.gz
https://blog.csdn.net/xiaohai928ww/article/details/53081159

rdesktop
wget
http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm
rpm -Uvh nux-dextop-release*rpm 
yum install rdesktop -y
rdesktop -f -a 16 192.168.1.100

** 流量监控

yum install nethogs
** nopasswd use expect
#!/usr/bin/expect
set timeout 20
set ip "147.16.15.3"
set username "root"
set password "######"
spawn scp test.sh $username@$ip:/home
expect "*password*" {send "$password\n"}
interact
