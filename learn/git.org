
** repository
工作区(workspace): 我们新创建的文件，修改的文件如果没有提交都是保存到工作区的

暂存区（index）: git add的时候我们会将代码提交到暂存区.只能通过git GUI或git shell 窗口显示，提交代码、解决冲突的中转站。(从上面这张图来说，我们的暂存区也会受到影响)

本地仓库（local repository）:git commit的时候会将暂存区的代码提交到本地仓库。只能在git shell 窗口显示，连接本地代码跟远程代码的枢纽，不能联网时本地代码可先提交至该处；

远程仓库（remote repository）: git push会将本地仓库代码提交到远程仓库

** base
echo "# aq" >> README.md
git init
git add README.md
git commit -m "first commit"



git clone git@192.168.45.4:/home/gitrepo/runoob.git

git checkout root@127.0.0.1:/home/dynamic_git/demo


----- untracked unmodified modified staged
git status
git status -s
git checkout
gitignore ??  doc/**/*.pdf

git rm log/\*.log

git log 
git reset --hard 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96  

git config --list
** git remote

git fetch origin master
//其中origin是对远程服务器的称呼，默认为master。git clone的时候可以自己指定.
//如git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master
//(1)目的:从远程的origin仓库的master主分支更新最新的版本到origin/master分支上
git log -p master..origin/master
//(2)目的:对比本地master和origin/master的区别，而且git fetch只会推送到本地仓库，不会到本地
git merge origin/master
//(3)目的:将本地的master和远程fetch下面的master合并

//相当于git fetch 和 git merge，即更新远程仓库的代码到本地仓库，然后将内容合并到当前分支。
git pull origin master

更改地址 git remote set-url origin http://192.168.100.235:9797/john/git_test.git
*** update local
//abendent local modified
git checkout head .



git remote add origin https://github.com/aqwork2009/aq.git
git push -u origin master

git remote add origin https://github.com/aqwork2009/aq.git
git push -u origin master


** git log
git log --name-status 	显示新增、修改、删除的文件清单。

** git diff
git status|grep -E "cpp$|h$"|awk '{print $2}'|xargs -i git diff {}
git diff --staged 

** gitignore
git config --global core.excludesfile ~/.gitignore
git rm -r --cached .
*.[oa]
*.obj
*[~#]
*.log
*.so
*.lib
*.dll
*.vs
*.ipdb
*.txt
*.iobj
*.pdb
*.exp
/.vs
/Debug
/x64
/Release

** git tag
查看 git tag 
创建 git tag -a v1.4 -m 'my version 1.4'
推送 git push origin --tags
签出 git checkout -b version2 v2.0.0


** 报错
库改config

[receive]
 denyCurrentBranch = ignore

 在客户端再执行git push origin master就可以成功了。
* svn

** 撒消： svn revert [-R] something
**  第二种情况：改动已经被提交（commit）。
这种情况下，用svn merge命令来进行回滚。 
   回滚的操作过程如下： 
   1、保证我们拿到的是最新代码： 
     svn update 
     假设最新版本号是28。 
   2、然后找出要回滚的确切版本号： 
     svn log [something]
     假设根据svn log日志查出要回滚的版本号是25，此处的something可以是文件、目录或整个项目
     如果想要更详细的了解情况，可以使用svn diff -r 28:25 [something]
   3、回滚到版本号25：
       svn merge -r 28:25 something
     为了保险起见，再次确认回滚的结果：
       svn diff [something]
     发现正确无误，提交。
   4、提交回滚：
     svn commit -m "Revert revision from r28 to r25,because of ..." 
     提交后版本变成了29。
   将以上操作总结为三条如下：
   1. svn update，svn log，找到最新版本（latest revision）
   2. 找到自己想要回滚的版本号（rollbak revision）
   3. 用svn merge来回滚： svn merge -r : something
