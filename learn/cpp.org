** knowleage 


zhongjianjian
ZeroMQ、Kafka、Infomatica、Tibco


Mysql/MangoDB等数据库开发；熟悉Redis，Nginx


分布式系统架构:
SOA、微服务等g


1.PoW，PoS，DPoS，PBFT，Paxos，Raft 等；
2. Bitcoin，Ethereum，Hyperledger 
3、熟悉数据结构和算法，对密码学，安全协议和加密算法有研究；
4、有分布式，点对点网络协议或应用开发经验优先；


1、 本科及以上学历，5年以上技术开发经验，有2年以上团队管理经验。
2、 有高并发互联网应用架构优化的经验者优先。
3、 熟悉mysql，memcache，redis，zookeeper，hive，hbase等开源组件的工作原理和适用场景。
4、熟练掌握C++，熟悉面向对象编程，对算法设计/数据结构有深刻的理解。
5、熟悉网络协议，精通网络编程、多线程编程技术，具备高并发网络服务开发经验。

熟练使用逆向工具及框架，如：Apktool、dex2jar、IDA、JEB、Frida、Xposed等；
image tech
OSG, 

1、负责软件开发和维护，包括软件设计、实现、测试、集成/发布和错误修复。
2、参与需求分析，并支持产品所有者和软件架构师对解决方案和架构进行分析。
3、包括任务分解、工作量估算和计划、实施、测试、演示和DOD。
4、确保软件代码的质量、可测试性、可维护性和功能可用性。

1、计算机、信息技术或相关领域本科或硕士学历
2、精通C++编程语言，熟悉Linux平台。熟悉NoDE.js，Python，有Linux /UNIX多线程编程经验，网络编程包括异步IO（EPOLL等）优先。
3、熟悉面向对象分析和设计，精通OOA/D，精通UML和设计模式；
4、熟悉业务建模（SAA首选）
5、熟悉SQL或NoSQL数据库；
6、熟悉GIT/Mag file；
7、了解HTTP/HTTPS；了解在REST API /JSON/直径/RADIUS /EAP-AKA知识；了解KVM虚拟化和云环境原理及应用；
8、良好的团队合作精神和强烈的团队精神；
9、良好的英语写作能力，能用英语进行非复杂技术的讨论。 

stl
https://blog.csdn.net/longhuahaha/article/details/8365041



** auto makefile
Makefile 文件自动生成方法
转载 2018年01月15日 10:06:35

    标签：
    Makefile /
    自动生成

 在本文中，将给大家介绍如何使用 autoconf和automake两个工具来帮助我们自动地生成符合自由软件惯例的Makefile，这样就可以象常见的GNU程序一样，只要使用“./configure”，“make”，“make install”就可以把程序安装到Linux系统中去了。
编译一个简单的源文件main.c,需要自动生成一个Makefile。

以下是步骤：

第一步：

在某个目录下创建一个文件main.c,其内容如下：

------------------------------------------------

#include <stdio.h>

int main(int argc, char** argv)

{

    printf("Hello, Auto Makefile!\n");

    return 0;

}

------------------------------------------------

第二步：

运行 autoscan , 自动创建两个文件： autoscan.log configure.scan

此时状态如下：

[root@localhost main]# autoscan

[root@localhost main]# ls

autoscan.log configure.scan main.c

[root@localhost main]#

第三步：

修改configure.scan的文件名为configure.in

查看configure.in的内容：

#                                               -*- Autoconf -*-

# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)

AC_INIT(FULL-PACKAGE-NAME, VERSION, BUG-REPORT-ADDRESS)

AC_CONFIG_SRCDIR([main.c])

AC_CONFIG_HEADER([config.h])

# Checks for programs.

AC_PROG_CC

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_OUTPUT

------------------------------------------------

解读以上的文件：

------------------------------------------------

#                                               -*- Autoconf -*-

# Process this file with autoconf to produce a configure script.

# AC_PREREQ:

# 确保使用的是足够新的Autoconf版本。如果用于创建configure的Autoconf的版

# 本比version 要早，就在标准错误输出打印一条错误消息并不会创建configure。

AC_PREREQ(2.61)

# 初始化,定义软件的基本信息,包括设置包的全称,版本号以及报告BUG时需要用的邮箱地址

AC_INIT(FULL-PACKAGE-NAME, VERSION, BUG-REPORT-ADDRESS)

# 用来侦测所指定的源码文件是否存在，来确定源码目录的有效性

AC_CONFIG_SRCDIR([main.c])

# 用于生成config.h文件，以便autoheader使用

AC_CONFIG_HEADER([config.h])

# Checks for programs.

AC_PROG_CC

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

# 创建输出文件。在`configure.in'的末尾调用本宏一次。

AC_OUTPUT

------------------------------------------------

修改动作:

    1.修改AC_INIT里面的参数: AC_INIT(main,1.0, szgdagun@sohu.com)

    2.添加宏AM_INIT_AUTOMAKE, 它是automake所必备的宏，也同前面一样，PACKAGE是所要产生软件套件的名称，VERSION是版本编号。

    3.在AC_OUTPUT后添加输出文件Makefile

修改后的结果:

#                                               -*- Autoconf -*-

# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)

AC_INIT(main, 1.0, pgpxc@163.com)   //修改

AC_CONFIG_SRCDIR([main.c])

AC_CONFIG_HEADER([config.h])

AM_INIT_AUTOMAKE(main,1.0)  //新增

# Checks for programs.

AC_PROG_CC

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_CONFIG_FILES([Makefile]) //如果有，就不需要增加

AC_OUTPUT

------------------------------------------------

第四步:

运行 aclocal, 生成一个“aclocal.m4”文件和一个缓冲文件夹autom4te.cache，该文件主要处理本地的宏定义。

此时的状态是：

[root@localhost main]# aclocal

[root@localhost main]# ls

aclocal.m4 autom4te.cache autoscan.log configure.in configure.in~ main.c

[root@localhost main]#

第五步：

运行 autoconf, 目的是生成 configure

此时的状态是：

[root@localhost main]# autoconf
[root@localhost main]# ls

aclocal.m4      autoscan.log configure.in   main.c

autom4te.cache configure     configure.in~

[root@localhost main]#

第六步：

运行 autoheader，它负责生成config.h.in文件。该工具通常会从“acconfig.h”文件中复制用户附加的符号定义，因此此处没有附加符号定义，所以不需要创建“acconfig.h”文件。

此时的状态是：

[root@localhost main]# autoheader

[root@localhost main]# ls

aclocal.m4      autoscan.log configure     configure.in~

autom4te.cache config.h.in   configure.in main.c

[root@localhost main]#

第七步：

将运行 automake, 但在此之前应该做一下准备工作!

首先

创建一个 Makefile.am.这一步是创建Makefile很重要的一步，automake要用的脚本配置文件是Makefile.am，用户需要自己创建相应的文件。之后，automake工具转换成Makefile.in。

这个Makefile.am的内容如下：

------------------------------------------------

AUTOMAKE_OPTIONS=foreign

bin_PROGRAMS=main

main_SOURCES=main.c

------------------------------------------------

下面对该脚本文件的对应项进行解释。

      其中的AUTOMAKE_OPTIONS为设置automake的选项。由于GNU（在第1章中已经有所介绍）对自己发布的软件有严格的规范，比如必须附 带许可证声明文件COPYING等，否则automake执行时会报错。automake提供了三种软件等级：foreign、gnu和gnits，让用 户选择采用，默认等级为gnu。在本例使用foreign等级，它只检测必须的文件。

bin_PROGRAMS定义要产生的执行文件名。如果要产生多个执行文件，每个文件名用空格隔开。

 main_SOURCES定义“main”这个执行程序所需要的原始文件。如果”main”这个程序是由多个原始文件所产生的，则必须把它所用到的所有原 始文件都列出来，并用空格隔开。例如：若目标体“main”需要“main.c”、“sunq.c”、“main.h”三个依赖文件，则定义 main_SOURCES=main.c sunq.c main.h。要注意的是，如果要定义多个执行文件，则对每个执行程序都要定义相应的file_SOURCES。

其次

使用automake对其生成“configure.in”文件，在这里使用选项“—adding-missing”可以让automake自动添加有一些必需的脚本文件。

运行后的状态是：

------------------------------------------------

[root@localhost main]# automake --add-missing

configure.in:8: installing `./missing'

configure.in:8: installing `./install-sh'

Makefile.am: installing `./depcomp'

[root@localhost main]# ls

aclocal.m4      config.h.in   configure.in~ main.c        Makefile.in

autom4te.cache configure     depcomp        Makefile.am missing

autoscan.log    configure.in install-sh     Makefile.am~

[root@localhost main]#

------------------------------------------------

第八步

运行configure，在这一步中，通过运行自动配置设置文件configure，把Makefile.in变成了最终的Makefile。

运行的结果如下：

------------------------------------------------

[root@localhost main]# ./configure

checking for a BSD-compatible install... /usr/bin/install -c

checking whether build environment is sane... yes

checking for a thread-safe mkdir -p... /bin/mkdir -p

checking for gawk... gawk

checking whether make sets $(MAKE)... yes

checking for gcc... gcc

checking for C compiler default output file name... a.out

checking whether the C compiler works... yes

checking whether we are cross compiling... no

checking for suffix of executables...

checking for suffix of object files... o

checking whether we are using the GNU C compiler... yes

checking whether gcc accepts -g... yes

checking for gcc option to accept ISO C89... none needed

checking for style of include used by make... GNU

checking dependency style of gcc... gcc3

configure: creating ./config.status

config.status: creating Makefile

config.status: creating config.h

config.status: executing depfiles commands

[root@localhost main]# ls

aclocal.m4      config.h.in    configure.in   main.c        Makefile.in

autom4te.cache config.log     configure.in~ Makefile      missing

autoscan.log    config.status depcomp        Makefile.am   stamp-h1

config.h        configure      install-sh     Makefile.am~

[root@localhost main]#

------------------------------------------------

第九步

运行 make，对配置文件Makefile进行测试一下

此时的状态如下:

------------------------------------------------

[root@localhost main]# make

cd . && /bin/sh /root/project/main/missing --run aclocal-1.10

cd . && /bin/sh /root/project/main/missing --run automake-1.10 --foreign

cd . && /bin/sh /root/project/main/missing --run autoconf

/bin/sh ./config.status --recheck

running CONFIG_SHELL=/bin/sh /bin/sh ./configure   --no-create --no-recursion

checking for a BSD-compatible install... /usr/bin/install -c

checking whether build environment is sane... yes

checking for a thread-safe mkdir -p... /bin/mkdir -p

checking for gawk... gawk

checking whether make sets $(MAKE)... yes

checking for gcc... gcc

checking for C compiler default output file name... a.out

checking whether the C compiler works... yes

checking whether we are cross compiling... no

checking for suffix of executables...

checking for suffix of object files... o

checking whether we are using the GNU C compiler... yes

checking whether gcc accepts -g... yes

checking for gcc option to accept ISO C89... none needed

checking for style of include used by make... GNU

checking dependency style of gcc... gcc3

configure: creating ./config.status

/bin/sh ./config.status

config.status: creating Makefile

config.status: creating config.h

config.status: config.h is unchanged

config.status: executing depfiles commands

cd . && /bin/sh /root/project/main/missing --run autoheader

rm -f stamp-h1

touch config.h.in

make all-am

make[1]: Entering directory `/root/project/main'

gcc -DHAVE_CONFIG_H -I.     -g -O2 -MT main.o -MD -MP -MF .deps/main.Tpo -c -o main.o main.c

mv -f .deps/main.Tpo .deps/main.Po

gcc -g -O2   -o main main.o

cd . && /bin/sh ./config.status config.h

config.status: creating config.h

config.status: config.h is unchanged

make[1]: Leaving directory `/root/project/main'

[root@localhost main]# ls

aclocal.m4      autoscan.log config.h.in config.status configure.in   depcomp     main    main.o    Makefile.am   Makefile.in stamp-h1

autom4te.cache config.h      config.log   configure      configure.in~ install-sh main.c Makefile Makefile.am~ missing

[root@localhost main]#

------------------------------------------------

第十步

运行生成的文件 main：

------------------------------------------------

[root@localhost main]# ./main

Hello, Auto Makefile!



** stl container

STL容器效率比较

1、vector

变长一维数组，连续存放的内存块，有保留内存，堆中分配内存；

支持[]操作，高效率的随机访问；

在最后增加元素时，一般不需要分配内存空间，速度快；在中间或开始操作元素时要进行内存拷贝效率低；

vector高效的原因在于配置了比其所容纳的元素更多的内存，内存重新配置会花很多时间；

注：需要高效的随即存取，而不在乎插入和删除使用vector。

 

2、list

双向链表，内存空间上可能是不连续的，无保留内存，堆中分配内存；

不支持随机存取，开始和结尾元素的访问时间快,其它元素都O（n）；

在任何位置安插和删除元素速度都比较快，安插和删除操作不会使其他元素的各个pointer，reference，iterator失效；

注：大量的插入和删除，而不关系随即存取使用list。

 

3、deque

双端队列，在堆上分配内存，一个堆保存几个元素，而堆之间使用指针连接；

支持[]操作，在首端和末端插入和删除元素比较快，在中部插入和删除则比较慢，像是list和vector的结合；

注：关心插入和删除并关心随即存取折中使用deque。

 

4、set&multiset

有序集合，使用平衡二叉树存储，按照给定的排序规则（默认按less排序）对set中的数据进行排序；

set中不允许有重复元素，multiset中运行有重复元素；

两者不支持直接存取元素的操作；

因为是自动排序，查找元素速度比较快；
不能直接改变元素值，否则会打乱原本正确的顺序，必须先下删除旧元素，再插入新的元素。

 

5、map&multimap

字典库，一个值映射成另一个值，使用平衡二叉树存储，按照给定的排序规则对map中的key值进行排序；

map中的key值不允许重复，multimap中的key允许重复；

根据已知的key值查找元素比较快；

插入和删除操作比较慢。


** linked
dynamic
LIBS += library.dll

简单的写法是上面的样子，建议使用完整的写法：

LIBS += -LD:/my_program_design/dll_test/test_library_by_header/ -llibrary


static 在pro文件增加：
LIBS += -LD:/my_program_design/dll_test/test_static_library/ -llibstatic_library



** compile item
https://blog.csdn.net/nickwong_/article/details/38762611

-fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，
  则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意
  位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。


    -I /home/hello/include，表示将/home/hello/include目录作为第一个寻找头文件的目录，寻找的顺序是：/home/hello/include–>/usr/include–>/usr/local/include
        也就是指定优先查找的目录，找不到的话查找默认目录

    -L /home/hello/lib，表示将/home/hello/lib目录作为第一个寻找库文件的目录， 寻找的顺序是：/home/hello/lib–>/lib–>/usr/lib–>/usr/local/lib
        同上，也是指定优先查找的目录

    -l word , 表示**寻找动态链接库文件**libword.so（也就是文件名去掉前缀和后缀所代表的库文件)
        如果 加上编译选项-static，表示寻找静态链接库文件，也就是libword.a
今天在看一个makefile时看到了gcc -W -Wall....这句，不明其理，专门查看了gcc的使用手册。

-w的意思是关闭编译时的警告，也就是编译后不显示任何warning，因为有时在编译之后编译器会显示一些例如数据转换之类的警告，这些警告是我们平时可以忽略的。

-Wall选项意思是编译后显示所有警告。

-W选项类似-Wall，会显示警告，但是只显示编译器认为会出现错误的警告。

*** -fPIC
-fPIC 作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，
  则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意
  位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。

gcc -shared -fPIC -o 1.so 1.c
这里有一个-fPIC参数
PIC就是position independent code
PIC使.so文件的代码段变为真正意义上的共享
如果不加-fPIC,则加载.so文件的代码段时,代码段引用的数据对象需要重定位, 重定位会修改代码段的内容,这就造成每个使用这个.so文件代码段的进程在内核里都会生成这个.so文件代码段的copy.每个copy都不一样,取决于 这个.so文件代码段和数据段内存映射的位置.
** debug
查看依赖搜索：ldd xxxx
** c函数
*** 字符处理
#incldue <string.h>
 
void *memset(void *s,int c,size_t n);
 
size_t strlen(const char *s);
 
void *memcpy(void *dest,const void *src,size_t n);
void *memmove(void *dest,const void *src,size_t n);
 
char *strcat(char *dest,const char *src);
char *strncat(char *desk,const char *src,size_t n);
 
//大小写敏感
int memcmp(const void *s1,const void *s2,size_t n);
int strcmp(const char *s1,const char *s2);
int strncmp(const char *s1,const char *s2,size_t n);
 
//大小写不敏感
int strcasecmp(const char *s1,const char *s2);
int strncasecmp(const char *s1,const char *s2,size_t n);
 
//正反向查询
char *strchr(const char *s,int c);
char *strrchr(const char *s,int c);
char *strstr(const char *haystack,const char *needle);
 
//分割字符串
char *strtok(char *str,const char *delim);
char *strtok_r(char *str,const char *delim,char **saveptr);

** define
*** 二define中的三个特殊符号：#，##，#@
 

    #define Conn(x,y) x##y
    #define ToChar(x) #@x
    #define ToString(x) #x

(1)x##y表示什么？表示x连接y，举例说：

    int n = Conn(123,456); /* 结果就是n=123456;*/
    char* str = Conn("asdf", "adf"); /*结果就是 str = "asdfadf";*/

（2）再来看#@x，其实就是给x加上单引号，结果返回是一个const char。举例说：
char a = ToChar(1);结果就是a='1';
做个越界试验char a = ToChar(123);结果就错了;
但是如果你的参数超过四个字符，编译器就给给你报错了！
error C2015: too many characters in constant   ：P
(3）最后看看#x,估计你也明白了，他是给x加双引号
char* str = ToString(123132);就成了str="123132";

*** 得到指定地址上的一个字节或字
 

    #define MEM_B( x ) ( *( (byte *) (x) ) ) 
    #define MEM_W( x ) ( *( (word *) (x) ) )


** 类型转换
类型转换机制可以分为:隐式类型转换 和 显示类型转换(强制类型转换)

C中的类型转换:

　　事情要从头说起,这个头就是C语言.我们已经习惯了使用C-like类型转换,因为它强大而且简单.

主要有一下两种形式:

 

    (new-type) expression
    new-type (expression)

 

C艹中的类型转换:

隐式类型转换比较常见,在混合类型表达式中经常发生.比如在表达式中存在short和int,那么就过会发生整型提升.四种强制类型转换操作符：static_cast、dynamic_cast、const_cast、reinterpret_cast。

1. static_cast与dynamic_cast:

　　把这两个放在一起比较容易记忆,"一静一动".从字面上也可以看出,前者提供的是编译时期的静态类型检测,后者提供的是

运行时检测.

    static_cast： 1）完成基础数据类型，2）同一个继承体系中类型的转换 3）任意类型与空指针类型void*之间的转换。
    dynamic_cast：使用多态的场景，增加了一层对真实调用对象类型的检查

     char c  = 65;
     int *p = (int *)&c;
     cout<<(char)*p<<endl;//'A'
     *p = 5;
     int *q = static_cast<int *>(&c); //编译报错:error: invalid static_cast from type ‘char*’ to type ‘int*’

 

　　在上面的例子中,Clike可以运行,然而修改过的*p如果使用,运行结果将会出现错误,而使用static_cast可以将错误在编译时期检查出,.

　　在不同继承体系的自定义类型中:

 

 
复制代码

class A
{
public:
  A(){}
  ~A(){}

private:
  int i, j;
};

class C
{
public:
  C(){}
  ~C(){}

  void printC()
  {
    std::cout <<"call printC() in class C" <<std::endl;
  }
private:
  char c1, c2;
};     

    A *ptrA = new A();
     C *ptrC = (C *)(ptrA);
     ptrC->printC(); //"call printC() in class C"
     //ptrC = static_cast<C*>(ptrA); //编译报错:error: invalid static_cast from type 'A*’ to type C*’

复制代码

 

　　上面A C是两个无关的类,然而使用Clike可以实现这种类型的强制转换,这是十分危险的! 使用static_cast可以将这种潜在的危险在编译器找出来.

　　在同一继承体系中:

　　upcast(向上转换即子类转成父类):没有问题.因为父类的行为都包含在子类中;

　　downcast(向下转换):有可能会出现问题,编译时可能不会发现.

　　一个类的行为和自身的类型相关.也就是一个A类型的指针总会优先调用自己A类内的函数,当然发生继承中的重写(虚继承等)例外.
复制代码

#include <iostream>
#include <cstdio>

using namespace std;
class A
{
public:
  A():i(1), j(1){}
  ~A(){}

  void printA()
  {
    std::cout <<"call printA() in class A" <<std::endl;
  }

  void printSum()
  {
    std::cout <<"sum = " <<i+j <<std::endl;
  }

private:
  int i, j;
};

class B : public A
{
public:
  B():a(2), b(2) {}
  ~B(){}

  void printB()
  {
    std::cout <<"call printB() in class B" <<std::endl;
  }

  void printSum()
  {
    std::cout <<"sum = " <<a+b <<std::endl;
  }

  void Add()
  {
    a++;
    b++;
  }

private:
  double a, b;
};
int main()
{
     B *ptrB = new B;
     ptrB -> printSum();
     A *ptrA = static_cast<B *>(ptrB);
     ptrA -> printA();
     ptrA -> printSum();
     //打印结果：sum = 2
     //在进行upcast的时候，指针指向的对象的行为与指针的类型相关。

     ptrA = new A;
     ptrB = static_cast<B *>(ptrA);
     ptrB -> printB();
     ptrB -> printSum();
     //打印结果：sum = 0
     //在进行downcast的时候，其行为是“undefined”。


     B b;
     B &rB = b;
     rB.printSum();
     //打印结果: sum = 4
     A &rA = static_cast<A &>(b);
     rA.printA();
     rA.printSum();
     //打印结果: sum = 2
     //在进行upcast的时候,指针指向的对象的行为与引用类型相关.

     A a;
     A &rA1 = a;
     rA.printSum();
     B &rB1 = static_cast<B &>(a);
     rB1.printB();
　　　//打印结果：sum = 4 
     rB1.printSum();
     //打印结果 :sum = 1.45863e-316
     //在进行downcast的时候，其行为是“undefined”。

     return 0;
}

复制代码

　　这里其实很明显,在downcast转换的时候,会出现一些跟指针或者引用类型相关的函数调用,但是因为指针或者引用(父类)

没有定义这些行为,因为调用到了这些行为导致出现了未定义的行为.

　　明显解决这个问题的办法就是,虚函数!如果声明A类中的printSum未 虚函数,那么子类B就会有一个虚表,虚表中的第一个函数就是printSum函数其实是

B类的该函数.所以,A类指针调用该函数就会调用B类中的该函数 显示结果sum= 4. 在未定义之前sum = 2(A类中的该函数).

　　PS:引用类型必须被初始化,这是引用和指针类型的重要区别.

　　总之,就是尽可能不要使用downcast也就是 使用子类的指针指向父类.

　　感觉这里又不得不说,c++内存对象的对齐方式.所以 ,在另外一篇blog<c++内存的对齐方式>中理清楚这些问题.

 

 

 

 

 

dynamic_cast
1.dynamic_cast是在运行时检查的，用于在集成体系中进行安全的向下转换downcast(当然也可以向上转换，但没必要，因为可以用虚函数实现)

   即：基类指针/引用 -> 派生类指针/引用

   如果源和目标没有继承/被继承关系，编译器会报错！
2.dynamic_cast是4个转换中唯一的RTTI操作符，提供运行时类型检查。
3.dynamic_cast不是强制转换，而是带有某种”咨询“性质的，如果不能转换，返回NULL。这是强制转换做不到的。

4.源类中必须要有虚函数，保证多态，才能使用dynamic_cast<source>(expression)
static_cast

用法：static_cast < type-id > ( expression )

该运算符把expression转换为type-id类型，在编译时使用类型信息执行转换，在转换执行必要的检测（指针越界，类型检查），其操作数相对是安全的。

但没有运行时类型检查来保证转换的安全性。
reinterpret_cast

仅仅是复制n1的比特位到d_r, 没有进行必要的分析.interpret_cast是为了映射到一个完全不同类型\
的意思，这个关键词在我们需要把类型映射回原有类型时用到它。我们映射到的类型仅仅是为了故弄\
玄虚和其他目的，这是所有映射中最危险的。(这句话是C++编程思想中的原话
const_cast

去除const常量属性，使其可以修改

and

volatile属性的转换  易变类型<->不同类型.
Code：
复制代码

#include <iostream>
#include <cstdio>
#include <string>

using namespace std;

class A {
    public:
    A(){};
    int m_a;
};

class B {
    public:
    int m_b;
};

class C : public A, public B {};

int main()
{
    const A a;
    //a.num = 1;
    const_cast<A&>(a).m_a = 2;
    //a.num = 3;编译不能通过，说明const_cast只能转换一次，不是永久脱离原有const属性
    cout<<a.m_a<<endl;
    int n = 9;
    double d_s = static_cast<double>(n);
    double d_r = reinterpret_cast<double&>(n);
    cout<<d_r<<endl;//4.24399e-314
    //在进行计算以后, d_r包含无用值. 这是因为 reinterpret_cast\
     仅仅是复制n1的比特位到d_r, 没有进行必要的分析.interpret_cast是为了映射到一个完全不同类型\
     的意思，这个关键词在我们需要把类型映射回原有类型时用到它。我们映射到的类型仅仅是为了故弄\
     玄虚和其他目的，这是所有映射中最危险的。(这句话是C++编程思想中的原话

    C c;
    printf("%p, %p, %p\n", &c, reinterpret_cast<B*>(&c), static_cast <B*>(&c));
    //前两个的输出值是相同的，最后一个则会在原基础上偏移4个字节，这是因为static_cast计算了父子类指针转换的偏移量，\
    并将之转换到正确的地址（c里面有m_a,m_b，转换为B*指针后指到m_b处），而reinterpret_cast却不会做这一层转换\
    因此, 你需要谨慎使用 reinterpret_cast.


    return 0;
}

复制代码

 
复制代码

#include <iostream>
#include <typeinfo>
#include <cstdio>

using namespace std;

class A{
public:
    virtual void foo(){
        cout<<"A foo"<<endl;
    }
    //虚函数的出现会带来动态机制 Class A 至少要有一个虚函数
    void pp(){
        cout<<"A pp"<<endl;
    }
};

class B: public A{
public:
    void foo(){
        cout<<"B foo"<<endl;
    }
    void pp(){
        cout<<"B PP"<<endl;
    }
    void functionB(){
        cout<<"Excute FunctionB!"<<endl;
    }
};

int main()
{
    B b;
    A *pa = &b;
    pa->foo();
    pa->pp();
    //基类指针可以指向派生类，但是只能调用基类和派生类都存在的成员，也就是说不能调用派生类中新增的成员！
    //pa->FunctionB();//error: 'class A' has no member named 'FunctionB'
    if(dynamic_cast<B*>(pa) == NULL){
        cout<<"NULL"<<endl;
    }else{
        cout<<typeid((dynamic_cast<B*>(pa))).name()<<endl;
        dynamic_cast<B*>(pa)->foo();
        dynamic_cast<B*>(pa)->pp();
        dynamic_cast<B*>(pa)->functionB();
    }
    A aa;
    //B *pb = &aa;派生类不能指向基类
    B *pbNull = NULL;
    pbNull->functionB();//fine
    pbNull->pp();//fine
    //pbNull->functionB(); crash！foo调用了虚函数，编译器需要根据对象的虚函数指针查找虚函数表，但为空，crash!
    return 0;
}
